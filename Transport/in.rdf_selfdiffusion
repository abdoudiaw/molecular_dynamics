# November 24 2019
# Author: Abdou Diaw (diaw@lanl.gov)

# LAMMPS input script for radial distribution function and self-diffusion coefficient of Yukawa plasma
# Green-Kubo method via compute velocity flux and fix ave/correlate
# Of course use the LAMMPS built-in vacf only for preliminary testing purposes as it yield negative values sometimes.
# I recommend to postprocess to the trajectories to make the autocorrelation converged. 

# Potential parameters

variable       Gamma     file  Gamma.csv

# settings

variable       tproduction    equal   200000
variable       teq            equal   20000
variable       d              equal   floor(${teq}/100)
variable       Nfreq          equal   floor(${tproduction}/2)
variable       xlen           equal   2.339214400000001e-05*2
variable       prcoeff        equal   2.306881e-19
variable       ecrg           equal   4.803000e-10
variable       mass_p         equal   1.660000e-24
variable       Npar           equal   1024 #1024 2048 4000
variable       q              equal   4.803000e-10
variable       Imas           equal   1.660000e-24
variable       Z              equal   $q/${ecrg}
variable       mu             equal   ${Imas}/${mass_p}

# setup problem

units            cgs
atom_style       charge
dimension        3
boundary         p p p

region	        box block 0 ${xlen} 0 ${xlen} 0 ${xlen}  units box
create_box	    1 box
create_atoms	1 random ${Npar}  257349 box
mass            1 ${Imas}
set     type 1 charge  ${q}

# Set the cut-off of the force

variable       dens      equal    count(all)/vol
variable       aws       equal    (3./(4*PI*${dens}))^(1./3.)
variable       rc        equal    5.0*${aws} #
variable       dbin      equal    .1*${rc}

# Estimate the temperature from Gamma

variable       t      equal   ${prcoeff}*${Z}*${Z}/(1.3808E-16*${aws}*${Gamma})

# Estimate the timestep from the inverse plasma frequency

variable       wp        equal   1.32e3*$Z*sqrt(${dens}/${mu})
variable       dtstep    equal   1e-2/${wp}
variable       Tdamp     equal   100.*${dtstep}

# Define the potential

pair_style       coul/long      ${rc}
pair_coeff       *   *
neighbor         ${dbin}        bin

# Neighbor list and Ewald

neigh_modify delay 0 every 1 check yes page 500000 one 50000
neigh_modify    delay 0 every 1

pair_modify      table          0 #  12 tabinner ${tb} tail yes
kspace_style     ewald          1.0e-4

# set particles velocities using a Maxwellian distribution

velocity        all create $t 102486 dist gaussian units box

# Equilibration run

fix		 	1 all nvt temp $t $t  ${Tdamp}

thermo		 	    $d
thermo_style		custom step pe ke etotal temp  

timestep		  ${dtstep}

run			  ${teq}

velocity    all scale $t

# remove the thermostat
unfix 1
reset_timestep 0
fix nveid  all  nve

# compute RDF

#compute     myRDF330 all rdf 1024
#fix         rdfid330 all ave/time 1 ${Nfreq} ${tproduction} c_myRDF330[1]  c_myRDF330[2]  file #rdf.Gamma=${Gamma}.Kappa=${kappa}.aws=${aws}.csv mode vector

# self-diffusion calculation using in-built lammps vacf command

compute         vacf all vacf
fix             5    all vector 1 c_vacf[4]
# this is the reduced self-diffusion
variable        diff equal dt*trap(f_5)/3./(${aws}*${aws}*${wp})   
variable        D equal v_diff

# If you want more control over the value of the self-diffusion; use the trajectories and post process.
# Set the frequency of the dump
#dump 4a all custom 10000 dump.data id type vx vy vz 

thermo_style custom step temp press ke pe etotal  c_vacf[4] v_diff
run ${tproduction}

print "D=$D" append coefficients.csv
print "Simulation succesfully done!"

clear
next Gamma
#next Npar
jump in.rdf_selfdiffusion
